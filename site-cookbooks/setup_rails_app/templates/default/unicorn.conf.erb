worker_processes <%= node[:unicorn][:worker_processes] %>

user "<%= @deploy[:deploy_user] %>"

working_directory "<%= @deploy[:deploy_to] %>/current"

listen "/tmp/unicorn_<%= node[:commons][:application] %>.sock", :backlog => <%= node[:unicorn][:backlog] %>

timeout <%= node[:unicorn][:timeout] %>

pid "<%= @deploy[:deploy_to] %>/shared/pids/unicorn.pid"

stderr_path "<%= @deploy[:deploy_to] %>/shared/log/unicorn.log"
stdout_path "<%= @deploy[:deploy_to] %>/shared/log/unicorn.log"

preload_app <%= node[:unicorn][:preload_app] %>

before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = "<%= @deploy[:deploy_to]%>/current/Gemfile"
end

before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end

  # Before forking, kill the master process that belongs to the .oldbin PID.
  # This enables 0 downtime deploys.
  old_pid = "<%= @deploy[:deploy_to]%>/shared/pids/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|
  # the following is *required* for Rails + "preload_app true",
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end

  # if preload_app is true, then you may also want to check and
  # restart any other shared sockets/descriptors such as Memcached,
  # and Redis.  TokyoCabinet file handles are safe to reuse
  # between any number of forked children (assuming your kernel
  # correctly implements pread()/pwrite() system calls)
end